# -*- coding: utf-8 -*-
"""AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZXoBeTKW5pZjsYw6LnlRvPlCLXhXBRRF
"""

!pip install googletrans==4.0.0-rc1 matplotlib

# outlining the code
from googletrans import Translator

def translate_text(text, src_lang, dest_lang):
    """
    Function to translate text from the source language to the destination language.

    Parameters:
    text (str): The input text to be translated.
    src_lang (str): Source language code (e.g., 'en' for English, 'fr' for French).
    dest_lang (str): Destination language code.

    Returns:
    str: The translated text.
    """
    translator = Translator()
    translation = translator.translate(text, src=src_lang, dest=dest_lang)
    return translation.text

def main():
    print("Welcome to the Language Translation Application!")
    src_lang = input("Enter the source language code (e.g., 'en' for English): ")
    dest_lang = input("Enter the destination language code: ")

    while True:
        text = input("\nEnter the text to translate (type 'exit' to quit): ")

        if text.lower() == 'exit':
            break

        translated_text = translate_text(text, src_lang, dest_lang)
        print("Translated Text: ", translated_text)

if __name__ == "__main__":
    main()

# other way
import matplotlib.pyplot as plt
from googletrans import Translator

def translate_text(text, src_lang, dest_lang):
    """
    Function to translate text from the source language to the destination language.

    Parameters:
    text (str): The input text to be translated.
    src_lang (str): Source language code (e.g., 'en' for English, 'fr' for French).
    dest_lang (str): Destination language code.

    Returns:
    str: The translated text.
    """
    translator = Translator()
    translation = translator.translate(text, src=src_lang, dest=dest_lang)
    return translation.text

def display_supported_languages():
    """
    Function to display supported language codes and their corresponding languages.
    """
    print("Supported Languages:")
    for code, lang in sorted(Translator().LANGUAGES.items()):
        print(f"{code} - {lang}")

def main():
    print("Welcome to the Language Translation Application!")
    display_supported_languages()

    while True:
        src_lang = input("\nEnter the source language code (e.g., 'en' for English): ")
        if src_lang not in Translator().LANGUAGES:
            print("Invalid source language code. Please enter a valid code.")
            continue

        dest_lang = input("Enter the destination language code: ")
        if dest_lang not in Translator().LANGUAGES:
            print("Invalid destination language code. Please enter a valid code.")
            continue

        text = input("\nEnter the text to translate (type 'exit' to quit): ")

        if text.lower() == 'exit':
            break

        try:
            translated_text = translate_text(text, src_lang, dest_lang)
            print("Translated Text: ", translated_text)

            # Data visualization
            plt.figure(figsize=(8, 4))
            plt.bar(["Source Text", "Translated Text"], [len(text), len(translated_text)])
            plt.xlabel("Text Type")
            plt.ylabel("Text Length")
            plt.title("Text Length Comparison")
            plt.show()

        except Exception as e:
            print(f"Translation Error: {e}")

if __name__ == "__main__":
    main()